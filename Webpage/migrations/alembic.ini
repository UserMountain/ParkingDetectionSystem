# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = migrations

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
# prepend_sys_path = .

# timezone to use when rendering dates within the migration file as
# well as the filename.
# string value is passed to dateutil.tz.gettz()
# use_utc = True

# max length of characters to apply to the "slug" field
# when rendering file names.  slug is the string value from the
# "message" field, with a default length of 40.
# truncate_slug_length = 40

# set to 'true' to run the environment during a
# 'revision' command, so that the script environment can be
# used to help generate candidate revisions.
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without a
# source .py file to be detected by revision scripts
# version_locations = %(here)s/versions

[alembic:log]
# Logging configuration
# See PEP 391 and logconfig for formatting help.
# If you want to use a custom logging configuration file,
# use fileConfig=<path-to-log-config-file>
fileConfig = %(here)s/logging.ini

# The URL that points to the database
# Replace this with your actual database URI
sqlalchemy.url = sqlite:///data.db

# logging configuration file
[loggers]
keys = root, sqlalchemy, alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console

[logger_sqlalchemy]
level = WARN
handlers = console
qualname = sqlalchemy.engine
propagate = 0

[logger_alembic]
level = INFO
handlers = console
qualname = alembic
propagate = 0

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s
